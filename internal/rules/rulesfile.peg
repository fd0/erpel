package rules

type ruleParser Peg {
    State
}

# this is the entry point to the grammar
start <- (Line EOL)* Line? (Separator Templates (Separator Samples)?)? EOF

Line <- (Field / Statement)? s Comment?

Name <- < [a-zA-Z0-9-_]+ >                            { p.name = buffer[begin:end] }
Statement <- s Name s '=' s Value                     { p.set(p.name, p.value) }

Field <- s "field" s FieldName s "{" FieldData "}"    { p.inField = false }

FieldName <- < [a-zA-Z0-9-_]+ >                       { p.inField = true; p.newField(buffer[begin:end]) }
FieldData <- (FieldStatement EOL)* FieldStatement?
FieldStatement <- Statement? s Comment?

Value <- List / String
String <- DoubleQuotedString / SingleQuotedString / RawString

List <- < "[" s (s String s "," s)* s String s "]" >       { p.value = buffer[begin:end] }
SingleQuotedString <- < "'" ( "\\'" / !EOL !"'" . )* "'" > { p.value = buffer[begin:end] }
DoubleQuotedString <- < '"' ( '\\"' / !EOL !'"' . )* '"' > { p.value = buffer[begin:end] }
RawString <- < "`" ( !"`" . )* "`" >                       { p.value = buffer[begin:end] }

Separator <- s "---" "-"* s EOL

Templates <- (!Separator (Comment / Template) EOL)*
Template <- s <(!EOL .)*>                             { p.addTemplate(buffer[begin:end]) }

Samples <- ((Comment / Sample) EOL)*
Sample <- s <(!EOL .)*>                               { p.addSample(buffer[begin:end]) }

# comment to the end of the line
Comment <- s '#' (!EOL .)*

EOF <- !.
EOL <- [\r\n]

# Space
s <- [ \t]*
